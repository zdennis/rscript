#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Experimental
  class Parser < Racc::Parser

module_eval(<<'...end nested.y/module_eval...', 'nested.y', 26)
  def dprint(str="")
    print str if ENV["DEBUG"]
  end
  
  def dputs(str="")
    puts str if ENV["DEBUG"]
  end

  def next_token
    @q.shift
  end
  
  def parse
    @q = []
    @q.push [:Block, "block"]
    @q.push [:Term, "\n"]
    @q.push [:Indent, 2]
    @q.push [:Block, "block"]
    @q.push [:Term, "\n"]
    @q.push [:Outdent, 2]
    @q.push [false, '$']   # is optional from Racc 1.3.7
    dputs
    dputs @q.inspect
    dputs
    __send__(Racc_Main_Parsing_Routine, _racc_setup(), false)
  end

...end nested.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     9,    12,    11,     9,    12,    11,     6,     7,    13,     6 ]

racc_action_check = [
     8,     8,     8,     4,     4,     4,     3,     1,     7,     0 ]

racc_action_pointer = [
     7,     7,   nil,     4,     0,   nil,   nil,     8,    -3,   nil,
   nil,   nil,   nil,   nil ]

racc_action_default = [
   -11,   -12,    -1,    -2,    -3,    -5,    -9,   -12,    -4,    -6,
    -7,    -8,   -10,    14 ]

racc_goto_table = [
     4,     3,     2,     8,     1 ]

racc_goto_check = [
     4,     3,     2,     4,     1 ]

racc_goto_pointer = [
   nil,     4,     2,     1,     0,   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,     5,    10 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 7, :_reduce_none,
  1, 7, :_reduce_2,
  1, 9, :_reduce_3,
  2, 9, :_reduce_none,
  1, 10, :_reduce_none,
  2, 10, :_reduce_6,
  2, 10, :_reduce_7,
  2, 10, :_reduce_none,
  1, 11, :_reduce_9,
  1, 12, :_reduce_10,
  0, 8, :_reduce_none ]

racc_reduce_n = 12

racc_shift_n = 14

racc_token_table = {
  false => 0,
  :error => 1,
  :Block => 2,
  :Indent => 3,
  :Term => 4,
  :Outdent => 5 }

racc_nt_base = 6

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "Block",
  "Indent",
  "Term",
  "Outdent",
  "$start",
  "program",
  "none",
  "stmts",
  "stmt",
  "block",
  "term" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'nested.y', 6)
  def _reduce_2(val, _values, result)
     puts val.inspect ; result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'nested.y', 8)
  def _reduce_3(val, _values, result)
     puts val.inspect ; result = val[0] 
    result
  end
.,.,

# reduce 4 omitted

# reduce 5 omitted

module_eval(<<'.,.,', 'nested.y', 12)
  def _reduce_6(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'nested.y', 13)
  def _reduce_7(val, _values, result)
     result = val 
    result
  end
.,.,

# reduce 8 omitted

module_eval(<<'.,.,', 'nested.y', 16)
  def _reduce_9(val, _values, result)
     puts val.inspect ; result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'nested.y', 18)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 11 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Experimental


require 'pp'

if $0 == __FILE__
  puts "-"*100
  puts 'result:'
  
  v = Experimental::Parser.new.parse
  pp v
end
